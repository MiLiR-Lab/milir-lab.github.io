"use strict";(self.webpackChunkmilir_lab_github_io=self.webpackChunkmilir_lab_github_io||[]).push([[6742],{3294:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"venv/windows/docker/docker_use","title":"\u57fa\u672c\u547d\u4ee4","description":"\u67e5\u770b\u5e2e\u52a9","source":"@site/docs/venv/windows/docker/docker_use.md","sourceDirName":"venv/windows/docker","slug":"/venv/windows/docker/docker_use","permalink":"/docs/venv/windows/docker/docker_use","draft":false,"unlisted":false,"editUrl":"https://github.com/MiLiR-Lab/milir-lab.github.io/docs/venv/windows/docker/docker_use.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"\u57fa\u672c\u547d\u4ee4"},"sidebar":"venvSidebar","previous":{"title":"\u5b89\u88c5\u73af\u5883","permalink":"/docs/venv/windows/docker/docker_install"},"next":{"title":"\u57fa\u672c\u914d\u7f6e","permalink":"/docs/venv/windows/docker/docker_config"}}');var i=n(4848),t=n(8453);const s={sidebar_position:1,title:"\u57fa\u672c\u547d\u4ee4"},a=void 0,c={},l=[{value:"\u67e5\u770b\u5e2e\u52a9",id:"\u67e5\u770b\u5e2e\u52a9",level:2},{value:"\u67e5\u770b\u4fe1\u606f",id:"\u67e5\u770b\u4fe1\u606f",level:2},{value:"\u62c9\u53d6\u955c\u50cf",id:"\u62c9\u53d6\u955c\u50cf",level:2},{value:"\u67e5\u770b\u955c\u50cf",id:"\u67e5\u770b\u955c\u50cf",level:2},{value:"\u5220\u9664\u955c\u50cf",id:"\u5220\u9664\u955c\u50cf",level:2},{value:"\u8fd0\u884c\u5bb9\u5668",id:"\u8fd0\u884c\u5bb9\u5668",level:2},{value:"\u67e5\u770b\u5bb9\u5668",id:"\u67e5\u770b\u5bb9\u5668",level:2},{value:"\u505c\u6b62\u5bb9\u5668",id:"\u505c\u6b62\u5bb9\u5668",level:2},{value:"\u6e05\u7406\u5bb9\u5668",id:"\u6e05\u7406\u5bb9\u5668",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"\u67e5\u770b\u5e2e\u52a9",children:"\u67e5\u770b\u5e2e\u52a9"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"--help"})," \u53c2\u6570\u53ef\u4ee5\u67e5\u770b\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker --help\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:'Usage:  docker [OPTIONS] COMMAND\r\n\r\nA self-sufficient runtime for containers\r\n\r\nCommon Commands:\r\n  run         Create and run a new container from an image\r\n  exec        Execute a command in a running container\r\n  ps          List containers\r\n  build       Build an image from a Dockerfile\r\n  bake        Build from a file\r\n  pull        Download an image from a registry\r\n  push        Upload an image to a registry\r\n  images      List images\r\n  login       Authenticate to a registry\r\n  logout      Log out from a registry\r\n  search      Search Docker Hub for images\r\n  version     Show the Docker version information\r\n  info        Display system-wide information\r\n\r\nManagement Commands:\r\n  builder     Manage builds\r\n  buildx*     Docker Buildx\r\n  checkpoint  Manage checkpoints\r\n  compose*    Docker Compose\r\n  container   Manage containers\r\n  context     Manage contexts\r\n  image       Manage images\r\n  manifest    Manage Docker image manifests and manifest lists\r\n  model*      Docker Model Runner (EXPERIMENTAL)\r\n  network     Manage networks\r\n  plugin      Manage plugins\r\n  system      Manage Docker\r\n  trust       Manage trust on Docker images\r\n  volume      Manage volumes\r\n\r\nSwarm Commands:\r\n  config      Manage Swarm configs\r\n  node        Manage Swarm nodes\r\n  secret      Manage Swarm secrets\r\n  service     Manage Swarm services\r\n  stack       Manage Swarm stacks\r\n  swarm       Manage Swarm\r\n\r\nCommands:\r\n  attach      Attach local standard input, output, and error streams to a running container\r\n  commit      Create a new image from a container\'s changes\r\n  cp          Copy files/folders between a container and the local filesystem\r\n  create      Create a new container\r\n  diff        Inspect changes to files or directories on a container\'s filesystem\r\n  events      Get real time events from the server\r\n  export      Export a container\'s filesystem as a tar archive\r\n  history     Show the history of an image\r\n  import      Import the contents from a tarball to create a filesystem image\r\n  inspect     Return low-level information on Docker objects\r\n  kill        Kill one or more running containers\r\n  load        Load an image from a tar archive or STDIN\r\n  logs        Fetch the logs of a container\r\n  pause       Pause all processes within one or more containers\r\n  port        List port mappings or a specific mapping for the container\r\n  rename      Rename a container\r\n  restart     Restart one or more containers\r\n  rm          Remove one or more containers\r\n  rmi         Remove one or more images\r\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\r\n  start       Start one or more stopped containers\r\n  stats       Display a live stream of container(s) resource usage statistics\r\n  stop        Stop one or more running containers\r\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\r\n  top         Display the running processes of a container\r\n  unpause     Unpause all processes within one or more containers\r\n  update      Update configuration of one or more containers\r\n  wait        Block until one or more containers stop, then print their exit codes\r\n\r\nGlobal Options:\r\n      --config string      Location of client config files (default "/home/milir/.docker")\r\n  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST\r\n                           env var and default context set with "docker context use")\r\n  -D, --debug              Enable debug mode\r\n  -H, --host list          Daemon socket to connect to\r\n  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default\r\n                           "info")\r\n      --tls                Use TLS; implied by --tlsverify\r\n      --tlscacert string   Trust certs signed only by this CA (default "/home/milir/.docker/ca.pem")\r\n      --tlscert string     Path to TLS certificate file (default "/home/milir/.docker/cert.pem")\r\n      --tlskey string      Path to TLS key file (default "/home/milir/.docker/key.pem")\r\n      --tlsverify          Use TLS and verify the remote\r\n  -v, --version            Print version information and quit\r\n\r\nRun \'docker COMMAND --help\' for more information on a command.\r\n\r\nFor more help on how to use Docker, head to https://docs.docker.com/go/guides/\n'})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u67e5\u770b\u4fe1\u606f",children:"\u67e5\u770b\u4fe1\u606f"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"info"})," \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d Docker \u7684\u4fe1\u606f\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker info\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Client: Docker Engine - Community\r\n Version:    28.3.2\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Docker Buildx (Docker Inc.)\r\n    Version:  v0.25.0\r\n    Path:     /usr/libexec/docker/cli-plugins/docker-buildx\r\n  compose: Docker Compose (Docker Inc.)\r\n    Version:  v2.38.2\r\n    Path:     /usr/libexec/docker/cli-plugins/docker-compose\r\n  model: Docker Model Runner (EXPERIMENTAL) (Docker Inc.)\r\n    Version:  v0.1.33\r\n    Path:     /usr/libexec/docker/cli-plugins/docker-model\r\n\r\nServer:\r\n Containers: 0\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 0\r\n Server Version: 28.3.2\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Using metacopy: false\r\n  Native Overlay Diff: true\r\n  userxattr: false\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\r\n CDI spec directories:\r\n  /etc/cdi\r\n  /var/run/cdi\r\n Swarm: inactive\r\n Runtimes: runc io.containerd.runc.v2\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 05044ec0a9a75232cad458027ca83437aae3f4da\r\n runc version: v1.2.5-0-g59923ef\r\n init version: de40ad0\r\n Security Options:\r\n  seccomp\r\n   Profile: builtin\r\n  cgroupns\r\n Kernel Version: 6.6.87.2-microsoft-standard-WSL2\r\n Operating System: Ubuntu 24.04.2 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 16\r\n Total Memory: 15.54GiB\r\n Name: Windows\r\n ID: ef629f6f-9c8c-4df0-b23c-a056a394ec85\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n Experimental: false\r\n Insecure Registries:\r\n  ::1/128\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u62c9\u53d6\u955c\u50cf",children:"\u62c9\u53d6\u955c\u50cf"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"pull"})," \u547d\u4ee4\u53ef\u4ee5\u62c9\u53d6 Docker \u955c\u50cf\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker pull <image_name>\r\n# \u62c9\u53d6 hello-world \u955c\u50cf\r\ndocker pull hello-world\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Using default tag: latest\r\nlatest: Pulling from library/hello-world\r\ne6590344b1a5: Pull complete\r\nDigest: sha256:ec153840d1e635ac434fab5e377081f17e0e15afab27beb3f726c3265039cfff\r\nStatus: Downloaded newer image for hello-world:latest\r\ndocker.io/library/hello-world:latest\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u67e5\u770b\u955c\u50cf",children:"\u67e5\u770b\u955c\u50cf"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"images"})," \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b Docker \u955c\u50cf\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker images\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"REPOSITORY    TAG       IMAGE ID       CREATED        SIZE\r\nhello-world   latest    74cc54e27dc4   5 months ago   10.1kB\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u5220\u9664\u955c\u50cf",children:"\u5220\u9664\u955c\u50cf"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"rmi"})," \u547d\u4ee4\u53ef\u4ee5\u5220\u9664 Docker \u955c\u50cf\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker rmi <image_id>\r\n# \u5220\u9664 hello-world \u955c\u50cf\r\ndocker rmi hello-world\n"})}),"\n",(0,i.jsx)(r.h2,{id:"\u8fd0\u884c\u5bb9\u5668",children:"\u8fd0\u884c\u5bb9\u5668"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"run"})," \u547d\u4ee4\u53ef\u4ee5\u8fd0\u884c Docker \u5bb9\u5668\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker run <image_name>\r\n# \u8fd0\u884c hello-world \u5bb9\u5668\r\ndocker run hello-world\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:'Hello from Docker!\r\nThis message shows that your installation appears to be working correctly.\r\n\r\nTo generate this message, Docker took the following steps:\r\n 1. The Docker client contacted the Docker daemon.\r\n 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.\r\n    (amd64)\r\n 3. The Docker daemon created a new container from that image which runs the\r\n    executable that produces the output you are currently reading.\r\n 4. The Docker daemon streamed that output to the Docker client, which sent it\r\n    to your terminal.\r\n\r\nTo try something more ambitious, you can run an Ubuntu container with:\r\n $ docker run -it ubuntu bash\r\n\r\nShare images, automate workflows, and more with a free Docker ID:\r\n https://hub.docker.com/\r\n\r\nFor more examples and ideas, visit:\r\n https://docs.docker.com/get-started/\n'})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u67e5\u770b\u5bb9\u5668",children:"\u67e5\u770b\u5bb9\u5668"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"ps"})," \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684 Docker \u5bb9\u5668\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker ps\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"\u7ec8\u7aef\u8f93\u51fa"}),(0,i.jsx)("p",{children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"\u505c\u6b62\u5bb9\u5668",children:"\u505c\u6b62\u5bb9\u5668"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"stop"})," \u547d\u4ee4\u53ef\u4ee5\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684 Docker \u5bb9\u5668\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker stop <container_id>\n"})}),"\n",(0,i.jsx)(r.h2,{id:"\u6e05\u7406\u5bb9\u5668",children:"\u6e05\u7406\u5bb9\u5668"}),"\n",(0,i.jsxs)(r.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(r.code,{children:"container prune"})," \u547d\u4ee4\u53ef\u4ee5\u6e05\u7406\u6240\u6709\u505c\u6b62\u7684 Docker \u5bb9\u5668\u3002"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"docker container prune\n"})})]})}function m(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var o=n(6540);const i={},t=o.createContext(i);function s(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);